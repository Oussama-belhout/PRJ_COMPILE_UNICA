entering now scope-----
we got to const : 0 
just got the aff 	
aff (i = 0)
we got to const : 10 
just created new_binop
(i < 10)
reducing the bin op (<) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
just got the aff 	
aff (i = (i + 1)
)
we got to const : 5 
just created new_binop
(i == 5)
reducing the bin op (==) propagated to experession
-- reducing instruction list one-by-one , inst number : 0
reducing now bloc
Created AST_BLOCK with instructs: 00C216C0
this bloc has 1 instructionsexiting now scope 1
exiting now scope 2
we got to const : 89 
just created new_binop
(n + 89)
reducing the bin op (+) propagated to experession
we got to const : 9 
just created new_binop
((n + 89)
 / 9)
reducing the bin op (/) propagated to experession
-- reducing instruction list one-by-one , inst number : 1
-- reducing instruction list one-by-one , inst number : 2
-- reducing instruction list one-by-one , inst number : 3
reducing now bloc
Created AST_BLOCK with instructs: 00C21800
this bloc has 4 instructionsexiting now scope 1
exiting now scope 2
reduced-exited function-scope main ---------
 getting to node Unknown getting to node {
  VLPT(id: printd, type: FUNC_CALL, params: )

  for (aff (i = 0)
; (i < 10)
; aff (i = (i + 1)
)
) {
  if ((i == 5)
) break;

}


  return ((n + 89)
 / 9)
;
}
 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : m getting to node mparam : i getting to node iparam : n getting to node n getting to node for (aff (i = 0)
; (i < 10)
; aff (i = (i + 1)
)
) {
  if ((i == 5)
) break;

}

 getting to node aff (i = 0)
 getting to node i getting to node 0 getting to node (i < 10)
 getting to node i getting to node 10 getting to node aff (i = (i + 1)
)
 getting to node i getting to node (i + 1)
 getting to node i getting to node 1 getting to node {
  if ((i == 5)
) break;

}
 getting to node if ((i == 5)
) break;
 getting to node (i == 5)
 getting to node i getting to node 5 getting to node break; getting to node return ((n + 89)
 / 9)
; getting to node ((n + 89)
 / 9)
 getting to node (n + 89)
 getting to node n getting to node 89 getting to node 9