entering now scope-----
just got the aff 	
aff (i = j)
we got to const : 10 
just created new_binop
(i < 10)
reducing the bin op (<) propagated to experession
we got to const : 2 
just created new_binop
(i + 2)
reducing the bin op (+) propagated to experession
just got the aff 	
aff (i = (i + 2)
)
-- reducing instruction list one-by-one , inst number : 0
-- reducing instruction list one-by-one , inst number : 1
reducing now bloc
Created AST_BLOCK with instructs: 00AF1758
this bloc has 2 instructionsexiting now scope 1
exiting now scope 2
we got to const : 10 
just got the aff 	
aff (i = (-10))
we got to const : 10 
just created new_binop
(i <= 10)
reducing the bin op (<=) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
just got the aff 	
aff (i = (i + 1)
)
we got to const : 0 
just got the aff 	
aff (i = 0)
we got to const : 20 
just created new_binop
(i >= (-20))
reducing the bin op (>=) propagated to experession
we got to const : 1 
just created new_binop
(i - 1)
reducing the bin op (-) propagated to experession
just got the aff 	
aff (i = (i - 1)
)
-- reducing instruction list one-by-one , inst number : 2
-- reducing instruction list one-by-one , inst number : 3
reducing now bloc
Created AST_BLOCK with instructs: 00AFB578
this bloc has 4 instructionsexiting now scope 1
exiting now scope 2
we got to const : 0 
-- reducing instruction list one-by-one , inst number : 4
-- reducing instruction list one-by-one , inst number : 5
-- reducing instruction list one-by-one , inst number : 6
-- reducing instruction list one-by-one , inst number : 7
-- reducing instruction list one-by-one , inst number : 8
-- reducing instruction list one-by-one , inst number : 9
reducing now bloc
Created AST_BLOCK with instructs: 00AFB638
this bloc has 10 instructionsexiting now scope 1
exiting now scope 2
reduced-exited function-scope main ---------
 getting to node Unknown getting to node {
  aff (i = j)

  while ((i < 10)
) {
  VLPT(id: printd, type: FUNC_CALL, params: )

  aff (i = (i + 2)
)

}


  for (aff (i = (-10))
; (i <= 10)
; aff (i = (i + 1)
)
) VLPT(id: printd, type: FUNC_CALL, params: )


  aff (i = 0)

  while ((i >= (-20))
) {
  VLPT(id: printd, type: FUNC_CALL, params: )

  aff (i = (i - 1)
)

}


  return 0;
}
 getting to node aff (i = j)
 getting to node i getting to node j getting to node while ((i < 10)
) {
  VLPT(id: printd, type: FUNC_CALL, params: )

  aff (i = (i + 2)
)

}

 getting to node (i < 10)
 getting to node i getting to node 10 getting to node {
  VLPT(id: printd, type: FUNC_CALL, params: )

  aff (i = (i + 2)
)

}
 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : i getting to node i getting to node aff (i = (i + 2)
)
 getting to node i getting to node (i + 2)
 getting to node i getting to node 2 getting to node for (aff (i = (-10))
; (i <= 10)
; aff (i = (i + 1)
)
) VLPT(id: printd, type: FUNC_CALL, params: )

 getting to node aff (i = (-10))
 getting to node i getting to node (-10) getting to node 10 getting to node (i <= 10)
 getting to node i getting to node 10 getting to node aff (i = (i + 1)
)
 getting to node i getting to node (i + 1)
 getting to node i getting to node 1 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : i getting to node i getting to node aff (i = 0)
 getting to node i getting to node 0 getting to node while ((i >= (-20))
) {
  VLPT(id: printd, type: FUNC_CALL, params: )

  aff (i = (i - 1)
)

}

 getting to node (i >= (-20))
 getting to node i getting to node (-20) getting to node 20 getting to node {
  VLPT(id: printd, type: FUNC_CALL, params: )

  aff (i = (i - 1)
)

}
 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : i getting to node i getting to node aff (i = (i - 1)
)
 getting to node i getting to node (i - 1)
 getting to node i getting to node 1 getting to node return 0; getting to node 0