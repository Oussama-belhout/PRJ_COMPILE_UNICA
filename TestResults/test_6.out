entering now scope-----
we got to const : 45000 
just got the aff 	
aff (i = 45000)
we got to const : 123 
just got the aff 	
aff (j = (-123))
just created new_binop
(i / j)
reducing the bin op (/) propagated to experession
we got to const : 45000 
just created new_binop
(45000 / j)
reducing the bin op (/) propagated to experession
we got to const : 123 
just created new_binop
(i / 123)
reducing the bin op (/) propagated to experession
we got to const : 45000 
we got to const : 123 
just created new_binop
(45000 / 123)
reducing the bin op (/) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(i / (j + 0)
)
reducing the bin op (/) propagated to experession
we got to const : 0 
just created new_binop
(i + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 0)
 / j)
reducing the bin op (/) propagated to experession
we got to const : 0 
just created new_binop
(i + 0)
reducing the bin op (+) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 0)
 / (j + 0)
)
reducing the bin op (/) propagated to experession
we got to const : 0 
just created new_binop
(i + 0)
reducing the bin op (+) propagated to experession
we got to const : 123 
just created new_binop
((i + 0)
 / 123)
reducing the bin op (/) propagated to experession
we got to const : 45000 
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(45000 / (j + 0)
)
reducing the bin op (/) propagated to experession
we got to const : 0 
-- reducing instruction list one-by-one , inst number : 0
-- reducing instruction list one-by-one , inst number : 1
-- reducing instruction list one-by-one , inst number : 2
-- reducing instruction list one-by-one , inst number : 3
-- reducing instruction list one-by-one , inst number : 4
-- reducing instruction list one-by-one , inst number : 5
-- reducing instruction list one-by-one , inst number : 6
-- reducing instruction list one-by-one , inst number : 7
-- reducing instruction list one-by-one , inst number : 8
-- reducing instruction list one-by-one , inst number : 9
-- reducing instruction list one-by-one , inst number : 10
-- reducing instruction list one-by-one , inst number : 11
reducing now bloc
Created AST_BLOCK with instructs: 00BBB4A0
this bloc has 12 instructionsexiting now scope 1
exiting now scope 2
reduced-exited function-scope main ---------
 getting to node Unknown getting to node {
  aff (i = 45000)

  aff (j = (-123))

  VLPT(id: printd, type: FUNC_CALL, params: )

  VLPT(id: printd, type: FUNC_CALL, params: )

  VLPT(id: printd, type: FUNC_CALL, params: )

  VLPT(id: printd, type: FUNC_CALL, params: )

  VLPT(id: printd, type: FUNC_CALL, params: )

  VLPT(id: printd, type: FUNC_CALL, params: )

  VLPT(id: printd, type: FUNC_CALL, params: )

  VLPT(id: printd, type: FUNC_CALL, params: )

  VLPT(id: printd, type: FUNC_CALL, params: )

  return 0;
}
 getting to node aff (i = 45000)
 getting to node i getting to node 45000 getting to node aff (j = (-123))
 getting to node j getting to node (-123) getting to node 123 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : (i / j)
 getting to node (i / j)
 getting to node i getting to node j getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : (45000 / j)
 getting to node (45000 / j)
 getting to node 45000 getting to node j getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : (i / 123)
 getting to node (i / 123)
 getting to node i getting to node 123 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : (45000 / 123)
 getting to node (45000 / 123)
 getting to node 45000 getting to node 123 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : (i / (j + 0)
)
 getting to node (i / (j + 0)
)
 getting to node i getting to node (j + 0)
 getting to node j getting to node 0 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : ((i + 0)
 / j)
 getting to node ((i + 0)
 / j)
 getting to node (i + 0)
 getting to node i getting to node 0 getting to node j getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : ((i + 0)
 / (j + 0)
)
 getting to node ((i + 0)
 / (j + 0)
)
 getting to node (i + 0)
 getting to node i getting to node 0 getting to node (j + 0)
 getting to node j getting to node 0 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : ((i + 0)
 / 123)
 getting to node ((i + 0)
 / 123)
 getting to node (i + 0)
 getting to node i getting to node 0 getting to node 123 getting to node VLPT(id: printd, type: FUNC_CALL, params: )
param : (45000 / (j + 0)
)
 getting to node (45000 / (j + 0)
)
 getting to node 45000 getting to node (j + 0)
 getting to node j getting to node 0 getting to node return 0; getting to node 0