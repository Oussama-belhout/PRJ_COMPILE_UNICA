entering now scope-----
we got to const : 450 
just got the aff 	
aff (i = 450)
we got to const : 123 
just got the aff 	
aff (j = Unknown)
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 < (j + 0)
)
reducing the bin op (<) propagated to experession
-- reducing instruction list one-by-one , inst number : 0
reducing now bloc
Created AST_BLOCK with instructs: 00B42B58
this bloc has 1 instructions`- Block -- 0
   `- VLPT [id: printd, type: FUNC_CALL]
exiting now scope 1
exiting now scope 2
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 < (j + 0)
)
reducing the bin op (<) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 < (j + 0)
)
reducing the bin op (<) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 123 
just created new_binop
((i + 1)
 < 123)
reducing the bin op (<) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 < j)
reducing the bin op (<) propagated to experession
we got to const : 45 
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(45 < (j + 0)
)
reducing the bin op (<) propagated to experession
we got to const : 45 
we got to const : 123 
just created new_binop
(45 < 123)
reducing the bin op (<) propagated to experession
we got to const : 45 
just created new_binop
(45 < j)
reducing the bin op (<) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(i < (j + 0)
)
reducing the bin op (<) propagated to experession
we got to const : 123 
just created new_binop
(i < 123)
reducing the bin op (<) propagated to experession
just created new_binop
(i < j)
reducing the bin op (<) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 > (j + 0)
)
reducing the bin op (>) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 123 
just created new_binop
((i + 1)
 > 123)
reducing the bin op (>) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 > j)
reducing the bin op (>) propagated to experession
we got to const : 45 
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(45 > (j + 0)
)
reducing the bin op (>) propagated to experession
we got to const : 45 
we got to const : 123 
just created new_binop
(45 > 123)
reducing the bin op (>) propagated to experession
we got to const : 45 
just created new_binop
(45 > j)
reducing the bin op (>) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(i > (j + 0)
)
reducing the bin op (>) propagated to experession
we got to const : 123 
just created new_binop
(i > 123)
reducing the bin op (>) propagated to experession
just created new_binop
(i > j)
reducing the bin op (>) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 >= (j + 0)
)
reducing the bin op (>=) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 123 
just created new_binop
((i + 1)
 >= 123)
reducing the bin op (>=) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 >= j)
reducing the bin op (>=) propagated to experession
we got to const : 45 
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(45 >= (j + 0)
)
reducing the bin op (>=) propagated to experession
we got to const : 45 
we got to const : 123 
just created new_binop
(45 >= 123)
reducing the bin op (>=) propagated to experession
we got to const : 45 
just created new_binop
(45 >= j)
reducing the bin op (>=) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(i >= (j + 0)
)
reducing the bin op (>=) propagated to experession
we got to const : 123 
just created new_binop
(i >= 123)
reducing the bin op (>=) propagated to experession
just created new_binop
(i >= j)
reducing the bin op (>=) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 <= (j + 0)
)
reducing the bin op (<=) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 123 
just created new_binop
((i + 1)
 <= 123)
reducing the bin op (<=) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 <= j)
reducing the bin op (<=) propagated to experession
we got to const : 45 
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(45 <= (j + 0)
)
reducing the bin op (<=) propagated to experession
we got to const : 45 
we got to const : 123 
just created new_binop
(45 <= 123)
reducing the bin op (<=) propagated to experession
we got to const : 45 
just created new_binop
(45 <= j)
reducing the bin op (<=) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(i <= (j + 0)
)
reducing the bin op (<=) propagated to experession
we got to const : 123 
just created new_binop
(i <= 123)
reducing the bin op (<=) propagated to experession
just created new_binop
(i <= j)
reducing the bin op (<=) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 == (j + 0)
)
reducing the bin op (==) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 123 
just created new_binop
((i + 1)
 == 123)
reducing the bin op (==) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 == j)
reducing the bin op (==) propagated to experession
we got to const : 45 
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(45 == (j + 0)
)
reducing the bin op (==) propagated to experession
we got to const : 45 
we got to const : 123 
just created new_binop
(45 == 123)
reducing the bin op (==) propagated to experession
we got to const : 45 
just created new_binop
(45 == j)
reducing the bin op (==) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(i == (j + 0)
)
reducing the bin op (==) propagated to experession
we got to const : 123 
just created new_binop
(i == 123)
reducing the bin op (==) propagated to experession
just created new_binop
(i == j)
reducing the bin op (==) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 != (j + 0)
)
reducing the bin op (!=) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
we got to const : 123 
just created new_binop
((i + 1)
 != 123)
reducing the bin op (!=) propagated to experession
we got to const : 1 
just created new_binop
(i + 1)
reducing the bin op (+) propagated to experession
just created new_binop
((i + 1)
 != j)
reducing the bin op (!=) propagated to experession
we got to const : 45 
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(45 != (j + 0)
)
reducing the bin op (!=) propagated to experession
we got to const : 45 
we got to const : 123 
just created new_binop
(45 != 123)
reducing the bin op (!=) propagated to experession
we got to const : 45 
just created new_binop
(45 != j)
reducing the bin op (!=) propagated to experession
we got to const : 0 
just created new_binop
(j + 0)
reducing the bin op (+) propagated to experession
just created new_binop
(i != (j + 0)
)
reducing the bin op (!=) propagated to experession
we got to const : 123 
just created new_binop
(i != 123)
reducing the bin op (!=) propagated to experession
just created new_binop
(i != j)
reducing the bin op (!=) propagated to experession
we got to const : 0 
-- reducing instruction list one-by-one , inst number : 1
-- reducing instruction list one-by-one , inst number : 2
-- reducing instruction list one-by-one , inst number : 3
-- reducing instruction list one-by-one , inst number : 4
-- reducing instruction list one-by-one , inst number : 5
-- reducing instruction list one-by-one , inst number : 6
-- reducing instruction list one-by-one , inst number : 7
-- reducing instruction list one-by-one , inst number : 8
-- reducing instruction list one-by-one , inst number : 9
-- reducing instruction list one-by-one , inst number : 10
-- reducing instruction list one-by-one , inst number : 11
-- reducing instruction list one-by-one , inst number : 12
-- reducing instruction list one-by-one , inst number : 13
-- reducing instruction list one-by-one , inst number : 14
-- reducing instruction list one-by-one , inst number : 15
-- reducing instruction list one-by-one , inst number : 16
-- reducing instruction list one-by-one , inst number : 17
-- reducing instruction list one-by-one , inst number : 18
-- reducing instruction list one-by-one , inst number : 19
-- reducing instruction list one-by-one , inst number : 20
-- reducing instruction list one-by-one , inst number : 21
-- reducing instruction list one-by-one , inst number : 22
-- reducing instruction list one-by-one , inst number : 23
-- reducing instruction list one-by-one , inst number : 24
-- reducing instruction list one-by-one , inst number : 25
-- reducing instruction list one-by-one , inst number : 26
-- reducing instruction list one-by-one , inst number : 27
-- reducing instruction list one-by-one , inst number : 28
-- reducing instruction list one-by-one , inst number : 29
-- reducing instruction list one-by-one , inst number : 30
-- reducing instruction list one-by-one , inst number : 31
-- reducing instruction list one-by-one , inst number : 32
-- reducing instruction list one-by-one , inst number : 33
-- reducing instruction list one-by-one , inst number : 34
-- reducing instruction list one-by-one , inst number : 35
-- reducing instruction list one-by-one , inst number : 36
-- reducing instruction list one-by-one , inst number : 37
-- reducing instruction list one-by-one , inst number : 38
-- reducing instruction list one-by-one , inst number : 39
-- reducing instruction list one-by-one , inst number : 40
-- reducing instruction list one-by-one , inst number : 41
-- reducing instruction list one-by-one , inst number : 42
-- reducing instruction list one-by-one , inst number : 43
-- reducing instruction list one-by-one , inst number : 44
-- reducing instruction list one-by-one , inst number : 45
-- reducing instruction list one-by-one , inst number : 46
-- reducing instruction list one-by-one , inst number : 47
-- reducing instruction list one-by-one , inst number : 48
-- reducing instruction list one-by-one , inst number : 49
-- reducing instruction list one-by-one , inst number : 50
-- reducing instruction list one-by-one , inst number : 51
-- reducing instruction list one-by-one , inst number : 52
-- reducing instruction list one-by-one , inst number : 53
-- reducing instruction list one-by-one , inst number : 54
-- reducing instruction list one-by-one , inst number : 55
-- reducing instruction list one-by-one , inst number : 56
-- reducing instruction list one-by-one , inst number : 57
-- reducing instruction list one-by-one , inst number : 58
-- reducing instruction list one-by-one , inst number : 59
reducing now bloc
Created AST_BLOCK with instructs: 00A21CC0
this bloc has 60 instructions`- Block -- 0
   |- Assign
   |  |- Id: i
   |  `- Number: 450
   |- Assign
   |  |- Id: j
   |  `- Unknown
   |- If
   |  |- BinOp [<]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- Block -- 0
   |  |  `- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- Number: 45
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- Number: 45
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- Number: 45
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- Id: i
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- Id: i
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<]
   |  |  |- Id: i
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>]
   |  |  |- Number: 45
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>]
   |  |  |- Number: 45
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>]
   |  |  |- Number: 45
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>]
   |  |  |- Id: i
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>]
   |  |  |- Id: i
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>]
   |  |  |- Id: i
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>=]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>=]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>=]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>=]
   |  |  |- Number: 45
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>=]
   |  |  |- Number: 45
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>=]
   |  |  |- Number: 45
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>=]
   |  |  |- Id: i
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>=]
   |  |  |- Id: i
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [>=]
   |  |  |- Id: i
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<=]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<=]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<=]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<=]
   |  |  |- Number: 45
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<=]
   |  |  |- Number: 45
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<=]
   |  |  |- Number: 45
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<=]
   |  |  |- Id: i
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<=]
   |  |  |- Id: i
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [<=]
   |  |  |- Id: i
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [==]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [==]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [==]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [==]
   |  |  |- Number: 45
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [==]
   |  |  |- Number: 45
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [==]
   |  |  |- Number: 45
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [==]
   |  |  |- Id: i
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [==]
   |  |  |- Id: i
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [==]
   |  |  |- Id: i
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [!=]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [!=]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [!=]
   |  |  |- BinOp [+]
   |  |  |  |- Id: i
   |  |  |  `- Number: 1
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [!=]
   |  |  |- Number: 45
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [!=]
   |  |  |- Number: 45
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [!=]
   |  |  |- Number: 45
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [!=]
   |  |  |- Id: i
   |  |  `- BinOp [+]
   |  |     |- Id: j
   |  |     `- Number: 0
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [!=]
   |  |  |- Id: i
   |  |  `- Number: 123
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   |- If
   |  |- BinOp [!=]
   |  |  |- Id: i
   |  |  `- Id: j
   |  |- VLPT [id: printd, type: FUNC_CALL]
   |  `- VLPT [id: printd, type: FUNC_CALL]
   `- Unknown
exiting now scope 1
exiting now scope 2
reduced-exited function-scope main ---------
now printing the whole tree 
